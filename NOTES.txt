To-Do
======
	(The code for the expression tree and NFA is already done)
1. Convert NFA (Thompson's Construction) to DFA, using Subset Construction
2. Use the DFA to check whether an entered string is a member of the language that the regular expression denotes
	a. Sample regex's and their sample test strings are in the TestData.txt file


NOTES
=======
0. See RegExp2AST.main() for running the entire process for converting regex to NFA

1. The NFA is created using Thompson's construction
	-> The NFA has only 1 Final (Accept) state (and 1 start state)
		-> Start State has no incoming transitions
		-> Final State has no outgoing transitions
			-> The Final NFAState's next1 & next2 fields will both be null, and symbol will be NFAState.ACCEPT
	-> Besides the Final State, each state has either:
		a. 1 outgoing transition on a symbol from the alphabet
			The NFAState's next2 field will be null
		b. 1 outgoing transition on epsilon
			The NFAState's next2 field will be null
		c. 2 outgoing transitions on epsilon
			-> NFAState's next2 (if not null, as in this case) will always transition on epsilon, thus there is no symbol field for it
				(The symbol2 field is for the next1 NFAState, used for IF transitioning on a character class instead of on a single character) [See the below point]

	-> [Update: NO! (See below)] Each NFAState object's symbol2 will be NFAState.EPSILON, as each (non-epsilon) transition is only on a single character/symbol [there are no character class transitions in a Thompson's Construction NFA]
		-> RegClassExp.java treats a character class as one symbol e.g. [x-y] is treated as a single symbol 'x-y' and it just creates ONE NFAState for the transition
			instead of treating the character class as an alternation -> ("x" | "y") and creating the 2 extra states and doing the epsilon-transitions
					Thus if there's a character class in the regex then symbol2 will be the upper character bound

				*******ASK SIR ABOUT THIS*******


NFAState toString(): stateNo	: [symbol,next1.stateNo, next2.stateNo]
	-> IF next1/next2 == null then '-' is put instead of stateNo
	-> IF symbol2 > symbol (default is 0 [epsilon]) then symbol becomes symbol-symbol2

Will have to use DFS/BFS to traverse the NFA to construct the DFA


2. TestData.txt format:
	A regular expression
	Test strings for this regex (one on each line)
	//
	next regular expression
	...

	-> Note that an empty line is for a test string that is an empty string (i.e. the empty line is meant to be there, it is not a mistake)


****In Dfa, change SIGMA_LOWER and SIGMA_UPPER to a smaller range?
	a. 48-122 to represents the digits and alphabets
	b. Make them variables and set them through the constructor to just represent the range of the alphabet of the regex/NFA

What I've done
===============
1. Created class DfaState
2. Modified/Updated the Dfa class

